{"ast":null,"code":"var _jsxFileName = \"/Users/luismiguelascencio/Development/labs/FINAL/granular-test1/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Tone from \"tone\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.clickHandler = () => {\n      //LOOP:::\n      let loopBeat; //Drums:::\n\n      let kick, hihat, hithatPan, hihat2, hihat2Pan, snare, snarePan; // MELODY ::\n\n      let bass;\n      let leadAutoPanner;\n      let lead;\n      let polySynthDelay;\n      let polySynthFilter;\n      let polySynthPanner;\n      let polySynth; //UTILITIES::\n\n      let counter;\n      let rand;\n      let rand2;\n      counter = 0; // Create instances::\n      // Start\n\n      loopBeat = new Tone.Loop(song, \"16n\");\n      Tone.Transport.bpm.value = 130;\n      Tone.Transport.start();\n      loopBeat.start(0); //kick:::\n\n      kick = new Tone.MembraneSynth({\n        pitchDecay: 0.07,\n        octaves: 5,\n        oscillator: {\n          type: \"sine\"\n        },\n        envelope: {\n          attack: 0.001,\n          decay: 0.2,\n          sustain: 0.002,\n          release: 1,\n          attackCurve: \"exponential\"\n        }\n      }).toMaster(); // Bass:::::\n\n      bass = new Tone.MembraneSynth({\n        pitchDecay: 0.03,\n        octaves: 2,\n        oscillator: {\n          type: \"sine\"\n        },\n        envelope: {\n          attack: 0.02,\n          decay: 0.5,\n          sustain: 0.001,\n          release: 0.1,\n          attackCurve: \"exponential\"\n        }\n      }).toMaster(); // Lead and autopanner::::\n\n      leadAutoPanner = new Tone.AutoPanner({\n        frequency: 0.3,\n        type: \"sine\",\n        depth: 1\n      }).toMaster().start();\n      lead = new Tone.PluckSynth({\n        attackNoise: 1,\n        dampening: 7000,\n        resonance: 0.7\n      }).connect(leadAutoPanner); /// Polysynth:::\n\n      polySynthFilter = new Tone.AutoFilter({\n        frequency: 0.8,\n        type: \"sine\",\n        depth: 1,\n        baseFrequency: 300,\n        octaves: 2.6,\n        filter: {\n          type: \"lowpass \",\n          rolloff: -24,\n          Q: 3\n        }\n      }).toMaster().start();\n      polySynthPanner = new Tone.PanVol({\n        pan: 0.4\n      }).toMaster();\n      polySynthDelay = new Tone.PingPongDelay({\n        delayTime: \"12n\",\n        maxDelay: 2,\n        wet: 0.4,\n        feedback: 0.3\n      }).toMaster();\n      polySynth = new Tone.PolySynth(6, Tone.Synth, {\n        oscillator: {\n          type: \"sawtooth\"\n        }\n      }).chain(polySynthFilter, polySynthDelay, polySynthPanner, Tone.Master); // Hihat::::\n\n      hithatPan = new Tone.PanVol({\n        pan: 0.35\n      }).toMaster();\n      hihat = new Tone.MetalSynth({\n        frequency: 200,\n        envelope: {\n          attack: 0.008,\n          decay: 0.052,\n          release: 0.002\n        },\n        harmonicity: 5.1,\n        modulationIndex: 32,\n        resonance: 3000,\n        octaves: 1.5\n      }).connect(hithatPan); //Hihat2:::\n\n      hihat2Pan = new Tone.PanVol({\n        pan: -0.3\n      }).toMaster();\n      hihat2 = new Tone.MetalSynth({\n        frequency: 400,\n        envelope: {\n          attack: 0.01,\n          decay: 0.01,\n          release: 0.005\n        },\n        harmonicity: 1.1,\n        modulationIndex: 24,\n        resonance: 4000,\n        octaves: 2.5\n      }).connect(hihat2Pan); //Snare :::\n\n      snarePan = new Tone.PanVol({\n        pan: -0.3\n      }).toMaster();\n      snare = new Tone.NoiseSynth({\n        noise: {\n          type: \"brown\"\n        },\n        envelope: {\n          attack: 0,\n          decay: 0.05,\n          sustain: 0.008\n        }\n      }).connect(snarePan);\n\n      function song(time) {\n        //\n        let currentBeat = Tone.Transport.position.split(\":\"); // Set Seqeunce:::\n        // kick\n\n        if (counter % 4 == 0) {\n          kick.triggerAttackRelease(\"c1\", \"8n\", time, 0.8);\n        } ///bass\n\n\n        if (counter % 5 == 0) {\n          bass.triggerAttackRelease(\"f2\", \"3n\", time, 0.2);\n        }\n\n        if (counter % 4 == 0) {\n          bass.envelope.decay = rand * 2.5;\n          bass.envelope.sustain = rand * 0.6;\n        } else {\n          bass.envelope.decay = 0.5;\n          bass.envelope.sustain = 0.001;\n        }\n\n        if (counter == 7) {\n          bass.triggerAttackRelease(\"c3\", \"3n\", time, 0.2);\n        } ///Lead\n\n\n        if (counter % 1 == 0) {\n          lead.triggerAttackRelease(\"d6\", \"4n\", time);\n          lead.volume.value = -20;\n          rand2 = Math.random();\n        }\n\n        if (counter % 3 == 0) {\n          lead.triggerAttackRelease(\"f7\", \"4n\", time);\n          lead.volume.value = -10;\n          lead.resonance.value = 0.9;\n        } else {\n          lead.resonance.value = 0.7;\n        } ///Polysynth\n\n\n        if (counter == 2) {\n          polySynth.triggerAttackRelease([\"d4\", \"f4\", \"A4\"], \"4n\");\n          polySynthDelay.feedback.value = rand2;\n          polySynthDelay.wet.value = rand2 * 0.3;\n          polySynth.volume.value = -25;\n        }\n\n        if (counter == 4) {\n          polySynth.triggerAttackRelease([\"d4\", \"c4\", \"A3\"], \"4n\");\n          polySynthDelay.feedback.value = rand2;\n          polySynthDelay.wet.value = rand2 * 0.3;\n          polySynth.volume.value = -25;\n        } /////Hh\n\n\n        if (counter % 4.5 == 0 || counter % 7 == 2) {\n          hihat.triggerAttackRelease(\"8n\", time, 0.08);\n          hihat.envelope.decay = rand2 * 0.3;\n        }\n\n        if (counter == 2 || counter == 6 || counter == 10 || counter == 14) {\n          hihat2.triggerAttackRelease(\"8n\", time, 0.3);\n        }\n\n        if (counter == 2 || counter == 6 || counter == 10 || counter == 14) {\n          rand = Math.random();\n        } /// Snare\n\n\n        if (counter == 4 || counter == 12) {\n          snare.triggerAttackRelease(\"8n\", time, 0.4);\n        }\n\n        console.log(\"This is rand: \".concat(rand));\n        console.log(\"This is rand2: \".concat(rand2));\n        console.log(time);\n        console.log(currentBeat); // Set counter\n\n        counter = (counter + 1) % 16;\n        console.log(\"hihat env \".concat(hihat.envelope.decay));\n        console.log(\"delay feedback \".concat(polySynthDelay.feedback.value));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.clickHandler,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Click Me!\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/luismiguelascencio/Development/labs/FINAL/granular-test1/src/App.js"],"names":["React","Tone","App","Component","state","clickHandler","loopBeat","kick","hihat","hithatPan","hihat2","hihat2Pan","snare","snarePan","bass","leadAutoPanner","lead","polySynthDelay","polySynthFilter","polySynthPanner","polySynth","counter","rand","rand2","Loop","song","Transport","bpm","value","start","MembraneSynth","pitchDecay","octaves","oscillator","type","envelope","attack","decay","sustain","release","attackCurve","toMaster","AutoPanner","frequency","depth","PluckSynth","attackNoise","dampening","resonance","connect","AutoFilter","baseFrequency","filter","rolloff","Q","PanVol","pan","PingPongDelay","delayTime","maxDelay","wet","feedback","PolySynth","Synth","chain","Master","MetalSynth","harmonicity","modulationIndex","NoiseSynth","noise","time","currentBeat","position","split","triggerAttackRelease","volume","Math","random","console","log","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Tone from \"tone\";\n\nclass App extends React.Component {\n  state = {};\n\n  //\n  // componentDidMount() {\n  //   return synth;\n  // }\n\n  clickHandler = () => {\n    //LOOP:::\n    let loopBeat;\n\n    //Drums:::\n    let kick, hihat, hithatPan, hihat2, hihat2Pan, snare, snarePan;\n\n    // MELODY ::\n    let bass;\n    let leadAutoPanner;\n    let lead;\n    let polySynthDelay;\n    let polySynthFilter;\n    let polySynthPanner;\n    let polySynth;\n\n    //UTILITIES::\n    let counter;\n    let rand;\n    let rand2;\n    counter = 0;\n\n    // Create instances::\n\n    // Start\n    loopBeat = new Tone.Loop(song, \"16n\");\n    Tone.Transport.bpm.value = 130;\n    Tone.Transport.start();\n    loopBeat.start(0);\n\n    //kick:::\n    kick = new Tone.MembraneSynth({\n      pitchDecay: 0.07,\n      octaves: 5,\n      oscillator: {\n        type: \"sine\"\n      },\n      envelope: {\n        attack: 0.001,\n        decay: 0.2,\n        sustain: 0.002,\n        release: 1,\n        attackCurve: \"exponential\"\n      }\n    }).toMaster();\n\n    // Bass:::::\n    bass = new Tone.MembraneSynth({\n      pitchDecay: 0.03,\n      octaves: 2,\n      oscillator: {\n        type: \"sine\"\n      },\n      envelope: {\n        attack: 0.02,\n        decay: 0.5,\n        sustain: 0.001,\n        release: 0.1,\n        attackCurve: \"exponential\"\n      }\n    }).toMaster();\n\n    // Lead and autopanner::::\n    leadAutoPanner = new Tone.AutoPanner({\n      frequency: 0.3,\n      type: \"sine\",\n      depth: 1\n    })\n      .toMaster()\n      .start();\n\n    lead = new Tone.PluckSynth({\n      attackNoise: 1,\n      dampening: 7000,\n      resonance: 0.7\n    }).connect(leadAutoPanner);\n\n    /// Polysynth:::\n\n    polySynthFilter = new Tone.AutoFilter({\n      frequency: 0.8,\n      type: \"sine\",\n      depth: 1,\n      baseFrequency: 300,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass \",\n        rolloff: -24,\n        Q: 3\n      }\n    })\n      .toMaster()\n      .start();\n\n    polySynthPanner = new Tone.PanVol({\n      pan: 0.4\n    }).toMaster();\n\n    polySynthDelay = new Tone.PingPongDelay({\n      delayTime: \"12n\",\n      maxDelay: 2,\n      wet: 0.4,\n      feedback: 0.3\n    }).toMaster();\n\n    polySynth = new Tone.PolySynth(6, Tone.Synth, {\n      oscillator: {\n        type: \"sawtooth\"\n      }\n    }).chain(polySynthFilter, polySynthDelay, polySynthPanner, Tone.Master);\n\n    // Hihat::::\n    hithatPan = new Tone.PanVol({\n      pan: 0.35\n    }).toMaster();\n\n    hihat = new Tone.MetalSynth({\n      frequency: 200,\n      envelope: {\n        attack: 0.008,\n        decay: 0.052,\n        release: 0.002\n      },\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      resonance: 3000,\n      octaves: 1.5\n    }).connect(hithatPan);\n\n    //Hihat2:::\n    hihat2Pan = new Tone.PanVol({\n      pan: -0.3\n    }).toMaster();\n\n    hihat2 = new Tone.MetalSynth({\n      frequency: 400,\n      envelope: {\n        attack: 0.01,\n        decay: 0.01,\n        release: 0.005\n      },\n      harmonicity: 1.1,\n      modulationIndex: 24,\n      resonance: 4000,\n      octaves: 2.5\n    }).connect(hihat2Pan);\n\n    //Snare :::\n    snarePan = new Tone.PanVol({\n      pan: -0.3\n    }).toMaster();\n    snare = new Tone.NoiseSynth({\n      noise: {\n        type: \"brown\"\n      },\n      envelope: {\n        attack: 0,\n        decay: 0.05,\n        sustain: 0.008\n      }\n    }).connect(snarePan);\n\n    function song(time) {\n      //\n      let currentBeat = Tone.Transport.position.split(\":\");\n      // Set Seqeunce:::\n      // kick\n      if (counter % 4 == 0) {\n        kick.triggerAttackRelease(\"c1\", \"8n\", time, 0.8);\n      }\n\n      ///bass\n      if (counter % 5 == 0) {\n        bass.triggerAttackRelease(\"f2\", \"3n\", time, 0.2);\n      }\n\n      if (counter % 4 == 0) {\n        bass.envelope.decay = rand * 2.5;\n        bass.envelope.sustain = rand * 0.6;\n      } else {\n        bass.envelope.decay = 0.5;\n        bass.envelope.sustain = 0.001;\n      }\n\n      if (counter == 7) {\n        bass.triggerAttackRelease(\"c3\", \"3n\", time, 0.2);\n      }\n\n      ///Lead\n      if (counter % 1 == 0) {\n        lead.triggerAttackRelease(\"d6\", \"4n\", time);\n        lead.volume.value = -20;\n        rand2 = Math.random();\n      }\n      if (counter % 3 == 0) {\n        lead.triggerAttackRelease(\"f7\", \"4n\", time);\n        lead.volume.value = -10;\n        lead.resonance.value = 0.9;\n      } else {\n        lead.resonance.value = 0.7;\n      }\n\n      ///Polysynth\n      if (counter == 2) {\n        polySynth.triggerAttackRelease([\"d4\", \"f4\", \"A4\"], \"4n\");\n        polySynthDelay.feedback.value = rand2;\n        polySynthDelay.wet.value = rand2 * 0.3;\n        polySynth.volume.value = -25;\n      }\n      if (counter == 4) {\n        polySynth.triggerAttackRelease([\"d4\", \"c4\", \"A3\"], \"4n\");\n        polySynthDelay.feedback.value = rand2;\n        polySynthDelay.wet.value = rand2 * 0.3;\n        polySynth.volume.value = -25;\n      }\n      /////Hh\n\n      if (counter % 4.5 == 0 || counter % 7 == 2) {\n        hihat.triggerAttackRelease(\"8n\", time, 0.08);\n        hihat.envelope.decay = rand2 * 0.3;\n      }\n\n      if (counter == 2 || counter == 6 || counter == 10 || counter == 14) {\n        hihat2.triggerAttackRelease(\"8n\", time, 0.3);\n      }\n      if (counter == 2 || counter == 6 || counter == 10 || counter == 14) {\n        rand = Math.random();\n      }\n\n      /// Snare\n      if (counter == 4 || counter == 12) {\n        snare.triggerAttackRelease(\"8n\", time, 0.4);\n      }\n\n      console.log(`This is rand: ${rand}`);\n      console.log(`This is rand2: ${rand2}`);\n\n      console.log(time);\n      console.log(currentBeat);\n      // Set counter\n      counter = (counter + 1) % 16;\n      console.log(`hihat env ${hihat.envelope.decay}`);\n      console.log(`delay feedback ${polySynthDelay.feedback.value}`);\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.clickHandler} type=\"button\">\n          Click Me!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}